DECLARE_ENT_SCRIPTDESC();




	// VSCRIPT
	HSCRIPT GetScriptInstance();
	HSCRIPT	m_hScriptInstance;
	
	int ScriptGetID( void ) const	{ return (int)GetID(); }
	void ScriptGetAdjacentAreas( int dir, HSCRIPT hTable );
	HSCRIPT ScriptGetAdjacentArea( int dir, int i );
	HSCRIPT ScriptGetRandomAdjacentArea( int dir );
	void ScriptGetIncomingConnections( int dir, HSCRIPT hTable );
	void ScriptAddIncomingConnection( HSCRIPT hSource, int incomingEdgeDir );
	void ScriptConnectToArea( HSCRIPT hArea, int dir );
	void ScriptDisconnectArea( HSCRIPT hArea );
	bool ScriptIsConnectedArea( HSCRIPT hArea, int dir );
	void ScriptConnectToLadder( HSCRIPT hLadder );
	void ScriptDisconnectLadder( HSCRIPT hLadder );
	bool ScriptIsConnectedLadder( HSCRIPT hLadder, int dir );
	const Vector& ScriptGetCorner( int corner ) const	{ return GetCorner( (NavCornerType) corner ); }
	void ScriptMarkAsBlocked( int teamID );
	int ScriptGetAdjacentCount( int dir ) const	{ return GetAdjacentCount( (NavDirType) dir ); }
	const char* ScriptGetPlaceName();
	void ScriptSetPlaceName( const char* pszName );
	int ScriptComputeDirection( const Vector &point ) const;
	void ScriptGetLadders( int dir, HSCRIPT hTable );
	int ScriptGetPlayerCount( int teamID ) const	{ return GetPlayerCount( teamID ); }
	bool ScriptIsOverlapping( HSCRIPT hArea ) const;
	bool ScriptIsOverlappingOrigin( const Vector &pos, float tolerance ) const	{ return IsOverlapping( pos, tolerance ); }
	bool ScriptIsEdge( int dir ) const	{ return IsEdge( (NavDirType) dir ); }
	bool ScriptContains( HSCRIPT hArea ) const;
	bool ScriptContainsOrigin( const Vector &pos ) const	{ return Contains( pos ); }
	float ScriptComputeGroundHeightChange( HSCRIPT hArea );
	HSCRIPT ScriptGetParent( void );
	int ScriptGetParentHow( void ) const	{ return GetParentHow(); }
	void ScriptUnblockArea( void );
	bool ScriptIsVisible( const Vector &eye ) const	{ return IsVisible( eye ); }
	float ScriptGetZ( const Vector &pos ) const	{ return GetZ( pos ); }
	bool ScriptIsCoplanar( HSCRIPT hArea ) const;
	void ScriptRemoveOrthogonalConnections( int dir );
	HSCRIPT ScriptGetElevator( void )	{ return ToHScript( GetElevator() ); }
	void ScriptGetElevatorAreas( HSCRIPT hTable );
	void ScriptRemoveSpawnAttributes( int bits )		{ RemoveSpawnAttributes( bits ); }
	void ScriptSetSpawnAttributes( int bits )		{ SetSpawnAttributes( bits ); }
	HSCRIPT ScriptGetDoor( void )		{ return ToHScript( GetDoor() ); }
	bool ScriptIsCleared( HSCRIPT hPlayer );
	void ScriptMarkAreaCleared( HSCRIPT hPlayer );




inline HSCRIPT ToHScript( TerrorNavArea *pArea )
{
	return ( pArea ) ? pArea->GetScriptInstance() : NULL;
}

template <> ScriptClassDesc_t *GetScriptDesc<TerrorNavArea>( TerrorNavArea * );
inline TerrorNavArea *ToNavArea( HSCRIPT hScript )
{
	return ( hScript ) ? (TerrorNavArea *)g_pScriptVM->GetInstanceValue( hScript, GetScriptDescForClass(TerrorNavArea) ) : NULL;
}